@module("esbuild") external buildSync: BuildConfig.config => unit = "buildSync"

@module("path") external dirname: string => string = "dirname"

type rmOptions = {
  recursive: bool,
  force: bool,
}

@module("fs") external rmSync: (string, option<rmOptions>) => unit = "rmSync"

@module("fs") external readFileSync: string => string = "readFileSync"

@module("fs") external writeFileSync: (~file: string, ~data: string) => unit = "writeFileSync"

let outputHeader = "// Generated by ReScript, PLEASE EDIT WITH CARE"

let build = async (): unit => {
  try {
    let buildEnv = BuildConfig.nodeEnv
    let config = if buildEnv === Some("production") {
      BuildConfig.build
    } else {
      BuildConfig.dev
    }

    let timerStart = Date.now()
    rmSync(dirname(config.outfile), Some({recursive: true, force: true}))

    buildSync(config)
    let bodyText = readFileSync(config.outfile)
    let headerText = readFileSync("./header.txt")
    writeFileSync(~file=config.outfile, ~data=`${headerText}\n${outputHeader}\n${bodyText}`)
    let timerEnd = Date.now()
    Console.log(`ðŸ”¨ Built in ${Float.toString(timerEnd -. timerStart)}ms.`)
  } catch {
  | Exn.Error(obj) =>
    switch Exn.message(obj) {
    | Some(m) => Console.log(m)
    | None => ()
    }
  }
}

await build()
